{"name":"Sedfuck","tagline":"A sed brainfuck transcompiler!!1!","body":"Sedfuck\r\n=======\r\n\r\nThis little sed script translates a given\r\nbrainfuck file to a runnable binary\r\n\r\nDependencies\r\n---------------\r\nJust GNU Sed and the GNU C compiler need to be\r\ninstalled on the host platform.\r\n\r\nUsage\r\n-----\r\nJust execute a command like the following\r\n\t\r\n\t$ sed -n -f sedfuck.sed < somecode.bf > sedfuck.out.c\r\n\r\nThis will compile the given brainfuck code to C code and uses\r\nthe C compiler to produce a runnable objectfile called sedfuck.out!\r\n\r\nNote that *you have to* redirect the output to the file\r\n\"sedfuck.out.c\".\r\n\r\nYou can also omit the redirection at the end.\r\n\r\n\t$ sed -n -f sedfuck.sed < <infile>.bf\r\n\r\nCalling sedfuck directly is also supported (GNU/Linux only):\r\n\t$ ./sedfuck.sed < [...]\r\n\r\nC inlining\r\n----------\r\n### General\r\nThis C->Brainfuck \"compiler\" provides you with the\r\npossibility to inline arbitrary C-Code. \r\n\r\n#### Simple example\r\nWith sedfuck, the following longly awaited extremely productive\r\nC code will finally be possible.\r\n\r\n\t+++++[ printf(\"PENUS!!\\+\\-\\[\\]\\n\"); - ]\r\n\t\r\nWill produce\r\n\r\n\tPENUS!!+-[]\r\n\tPENUS!!+-[]\r\n\tPENUS!!+-[]\r\n\tPENUS!!+-[]\r\n\tPENUS!!+-[]\r\n\t\r\n#### More complex example:\r\n\r\n\t+++++[ printf(\"PENUS!!\\+\\-\\[\\]\\n\");- ]\r\n\tprintf(\"BAM\\n\");\r\n\tint t;\r\n\r\n\t+++++[ switch(*ptr){\r\n\t\t\tcase 1: \r\n\t\t\t\t{ \r\n\t\t\t\t\t>+++++[\r\n\t\t\t\t\t\tprintf(\"ONE %d!\\n\"\\, *ptr);-\r\n\t\t\t\t\t]< \r\n\t\t\t\t}; break;\r\n\t\t\tcase 2: { \r\n\t\t\t\t>++++[printf(\"TWO %d!\\n\"\\, *ptr);-]< }; break;\r\n\t\t\tcase 3: { \r\n\t\t\t\t>+++[ printf(\"THREE %d!\\n\"\\, *ptr);- ]< \r\n\t\t\t}; break;\r\n\t\t\tcase 4: { \r\n\t\t\t\t>++[printf(\"FOUR %d!\\n\"\\, *ptr);-]< \r\n\t\t\t}; break;\r\n\t\t\tcase 5: { \r\n\t\t\t\t>+++[\r\n\t\t\t\t\tt = *ptr;\r\n\t\t\t\t\t>+++[printf(\"FIVE %d\\, %d!\\n\"\\, t\\, *ptr);-]< \r\n\t\t\t\t-]<\r\n\t\t\t}; break;\r\n\t}-]\r\n\r\nOutput:\r\n\r\n\tPENUS!!+-[]\r\n\tPENUS!!+-[]\r\n\tPENUS!!+-[]\r\n\tPENUS!!+-[]\r\n\tPENUS!!+-[]\r\n\tBÃ„M\r\n\tFIVE 3, 3!\r\n\tFIVE 3, 2!\r\n\tFIVE 3, 1!\r\n\tFIVE 2, 3!\r\n\tFIVE 2, 2!\r\n\tFIVE 2, 1!\r\n\tFIVE 1, 3!\r\n\tFIVE 1, 2!\r\n\tFIVE 1, 1!\r\n\tFOUR 2!\r\n\tFOUR 1!\r\n\tTHREE 3!\r\n\tTHREE 2!\r\n\tTHREE 1!\r\n\tTWO 4!\r\n\tTWO 3!\r\n\tTWO 2!\r\n\tTWO 1!\r\n\tONE 5!\r\n\tONE 4!\r\n\tONE 3!\r\n\tONE 2!\r\n\tONE 1!\r\n\r\n### Escaping of brainfuck symbols\r\nAs you can see, sedfuck handles the processing of brainfuck symbols properly. You only have\r\nto prefix them with the \"\\\" char. That's it.\r\n\r\n### Accessing the brainfuck pointer\r\n\r\nThe brainfuck pointer can be accessed as follows\r\n\r\n\t+++[ printf(\"WATMAN?! #%d\\n\"\\, *ptr); ]\r\n\r\nSince the dynamic array ptr is accessible everywhere you could also\r\nwrite something like this\r\n\r\n\t+++[ printf(\"WUT?\"); ptr\\[*ptr\\] = 65;-]\r\n\t>>>.<.<.\r\n\r\n\t=>\r\n\tWUT?\r\n\tWUT?\r\n\tWUT?\r\n\tAAA\r\n\r\n### C Funktions\r\nInlining of C functions is a little bit difficult to implement.\r\nHowever, if your compiler supports something like the -fnested-functions\r\nflag, you can just write your function to an arbitrary position in the\r\nbrainfuck source file.\r\n\r\nExample:\r\n\t\r\n\tint foo(){\r\n\t\t+++[printf(\"Nothing!\\n\");-]\r\n\t\treturn 0\r\n\t}\r\n\t\r\n\t++++++[\r\n\t\t>++++++++++<\r\n\t-]\r\n\t>+++++.printf(\"%d\"\\,*ptr);\r\n\tfoo();\r\n\t\r\n\r\n![wat](img/wat2.gif)\r\n\r\nTODO\r\n----\r\nInclusion of user defined header files\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}